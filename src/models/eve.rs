// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use bigdecimal::BigDecimal;
use diesel::prelude::*;

use crate::schema::eve as schema;

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::agt_agent_types)]
#[diesel(primary_key(agent_type_id))]
pub struct AgtAgentType {
    pub agent_type_id: i32,
    pub agent_type: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::agt_agents)]
#[diesel(primary_key(agent_id))]
pub struct AgtAgent {
    pub agent_id: i32,
    pub division_id: Option<i32>,
    pub corporation_id: Option<i32>,
    pub location_id: Option<i32>,
    pub level: Option<i32>,
    pub quality: Option<i32>,
    pub agent_type_id: Option<i32>,
    pub is_locator: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::agt_agents_in_space)]
#[diesel(primary_key(agent_id))]
pub struct AgtAgentsInSpace {
    pub agent_id: i32,
    pub dungeon_id: Option<i32>,
    pub solar_system_id: Option<i32>,
    pub spawn_point_id: Option<i32>,
    pub type_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::agt_research_agents)]
#[diesel(primary_key(agent_id, type_id))]
pub struct AgtResearchAgent {
    pub agent_id: i32,
    pub type_id: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::cert_certs)]
#[diesel(primary_key(cert_id))]
pub struct CertCert {
    pub cert_id: i32,
    pub description: Option<String>,
    pub group_id: Option<i32>,
    pub name: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::cert_masteries)]
#[diesel(primary_key(type_id, mastery_level, cert_id))]
pub struct CertMastery {
    pub type_id: i32,
    pub mastery_level: i32,
    pub cert_id: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::cert_skills)]
#[diesel(primary_key(cert_id, skill_id, cert_level_int, skill_level))]
pub struct CertSkill {
    pub cert_id: i32,
    pub skill_id: i32,
    pub cert_level_int: i32,
    pub skill_level: i32,
    pub cert_level_text: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::chr_ancestries)]
#[diesel(primary_key(ancestry_id))]
pub struct ChrAncestry {
    pub ancestry_id: i32,
    pub ancestry_name: Option<String>,
    pub bloodline_id: Option<i32>,
    pub description: Option<String>,
    pub perception: Option<i32>,
    pub willpower: Option<i32>,
    pub charisma: Option<i32>,
    pub memory: Option<i32>,
    pub intelligence: Option<i32>,
    pub icon_id: Option<i32>,
    pub short_description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::chr_attributes)]
#[diesel(primary_key(attribute_id))]
pub struct ChrAttribute {
    pub attribute_id: i32,
    pub attribute_name: Option<String>,
    pub description: Option<String>,
    pub icon_id: Option<i32>,
    pub short_description: Option<String>,
    pub notes: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::chr_bloodlines)]
#[diesel(primary_key(bloodline_id))]
pub struct ChrBloodline {
    pub bloodline_id: i32,
    pub bloodline_name: Option<String>,
    pub race_id: Option<i32>,
    pub description: Option<String>,
    pub male_description: Option<String>,
    pub female_description: Option<String>,
    pub ship_type_id: Option<i32>,
    pub corporation_id: Option<i32>,
    pub perception: Option<i32>,
    pub willpower: Option<i32>,
    pub charisma: Option<i32>,
    pub memory: Option<i32>,
    pub intelligence: Option<i32>,
    pub icon_id: Option<i32>,
    pub short_description: Option<String>,
    pub short_male_description: Option<String>,
    pub short_female_description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::chr_factions)]
#[diesel(primary_key(faction_id))]
pub struct ChrFaction {
    pub faction_id: i32,
    pub faction_name: Option<String>,
    pub description: Option<String>,
    pub race_i_ds: Option<i32>,
    pub solar_system_id: Option<i32>,
    pub corporation_id: Option<i32>,
    pub size_factor: Option<f64>,
    pub station_count: Option<i32>,
    pub station_system_count: Option<i32>,
    pub militia_corporation_id: Option<i32>,
    pub icon_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::chr_races)]
#[diesel(primary_key(race_id))]
pub struct ChrRace {
    pub race_id: i32,
    pub race_name: Option<String>,
    pub description: Option<String>,
    pub icon_id: Option<i32>,
    pub short_description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::crp_activities)]
#[diesel(primary_key(activity_id))]
pub struct CrpActivity {
    pub activity_id: i32,
    pub activity_name: Option<String>,
    pub description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::crp_npc_corporation_divisions)]
#[diesel(primary_key(corporation_id, division_id))]
pub struct CrpNpcCorporationDivision {
    pub corporation_id: i32,
    pub division_id: i32,
    pub size: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::crp_npc_corporation_research_fields)]
#[diesel(primary_key(skill_id, corporation_id))]
pub struct CrpNpcCorporationResearchField {
    pub skill_id: i32,
    pub corporation_id: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::crp_npc_corporation_trades)]
#[diesel(primary_key(corporation_id, type_id))]
pub struct CrpNpcCorporationTrade {
    pub corporation_id: i32,
    pub type_id: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::crp_npc_corporations)]
#[diesel(primary_key(corporation_id))]
pub struct CrpNpcCorporation {
    pub corporation_id: i32,
    pub size: char,
    pub extent: char,
    pub solar_system_id: Option<i32>,
    pub investor_id1: Option<i32>,
    pub investor_shares1: Option<i32>,
    pub investor_id2: Option<i32>,
    pub investor_shares2: Option<i32>,
    pub investor_id3: Option<i32>,
    pub investor_shares3: Option<i32>,
    pub investor_id4: Option<i32>,
    pub investor_shares4: Option<i32>,
    pub friend_id: Option<i32>,
    pub enemy_id: Option<i32>,
    pub public_shares: Option<i32>,
    pub initial_price: Option<i32>,
    pub min_security: Option<f64>,
    pub scattered: Option<bool>,
    pub fringe: Option<i32>,
    pub corridor: Option<i32>,
    pub hub: Option<i32>,
    pub border: Option<i32>,
    pub faction_id: Option<i32>,
    pub size_factor: Option<f64>,
    pub station_count: Option<i32>,
    pub station_system_count: Option<i32>,
    pub description: Option<String>,
    pub icon_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::crp_npc_divisions)]
#[diesel(primary_key(division_id))]
pub struct CrpNpcDivision {
    pub division_id: i32,
    pub division_name: Option<String>,
    pub description: Option<String>,
    pub leader_type: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::dgm_attribute_categories)]
#[diesel(primary_key(category_id))]
pub struct DgmAttributeCategory {
    pub category_id: i32,
    pub category_name: Option<String>,
    pub category_description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::dgm_attribute_types)]
#[diesel(primary_key(attribute_id))]
pub struct DgmAttributeType {
    pub attribute_id: i32,
    pub attribute_name: Option<String>,
    pub description: Option<String>,
    pub icon_id: Option<i32>,
    pub default_value: Option<f64>,
    pub published: Option<bool>,
    pub display_name: Option<String>,
    pub unit_id: Option<i32>,
    pub stackable: Option<bool>,
    pub high_is_good: Option<bool>,
    pub category_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::dgm_effects)]
#[diesel(primary_key(effect_id))]
pub struct DgmEffect {
    pub effect_id: i32,
    pub effect_name: Option<String>,
    pub effect_category: Option<i32>,
    pub pre_expression: Option<i32>,
    pub post_expression: Option<i32>,
    pub description: Option<String>,
    pub guid: Option<String>,
    pub icon_id: Option<i32>,
    pub is_offensive: Option<bool>,
    pub is_assistance: Option<bool>,
    pub duration_attribute_id: Option<i32>,
    pub tracking_speed_attribute_id: Option<i32>,
    pub discharge_attribute_id: Option<i32>,
    pub range_attribute_id: Option<i32>,
    pub falloff_attribute_id: Option<i32>,
    pub disallow_auto_repeat: Option<bool>,
    pub published: Option<bool>,
    pub display_name: Option<String>,
    pub is_warp_safe: Option<bool>,
    pub range_chance: Option<bool>,
    pub electronic_chance: Option<bool>,
    pub propulsion_chance: Option<bool>,
    pub distribution: Option<i32>,
    pub sfx_name: Option<String>,
    pub npc_usage_chance_attribute_id: Option<i32>,
    pub npc_activation_chance_attribute_id: Option<i32>,
    pub fitting_usage_chance_attribute_id: Option<i32>,
    pub modifier_info: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::dgm_expressions)]
#[diesel(primary_key(expression_id))]
pub struct DgmExpression {
    pub expression_id: i32,
    pub operand_id: Option<i32>,
    pub arg1: Option<i32>,
    pub arg2: Option<i32>,
    pub expression_value: Option<String>,
    pub description: Option<String>,
    pub expression_name: Option<String>,
    pub expression_type_id: Option<i32>,
    pub expression_group_id: Option<i32>,
    pub expression_attribute_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::dgm_type_attributes)]
#[diesel(primary_key(type_id, attribute_id))]
pub struct DgmTypeAttribute {
    pub type_id: i32,
    pub attribute_id: i32,
    pub value_int: Option<i32>,
    pub value_float: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::dgm_type_effects)]
#[diesel(primary_key(type_id, effect_id))]
pub struct DgmTypeEffect {
    pub type_id: i32,
    pub effect_id: i32,
    pub is_default: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::eve_graphics)]
#[diesel(primary_key(graphic_id))]
pub struct EveGraphic {
    pub graphic_id: i32,
    pub sof_faction_name: Option<String>,
    pub graphic_file: Option<String>,
    pub sof_hull_name: Option<String>,
    pub sof_race_name: Option<String>,
    pub description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::eve_icons)]
#[diesel(primary_key(icon_id))]
pub struct EveIcon {
    pub icon_id: i32,
    pub icon_file: Option<String>,
    pub description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::eve_units)]
#[diesel(primary_key(unit_id))]
pub struct EveUnit {
    pub unit_id: i32,
    pub unit_name: Option<String>,
    pub display_name: Option<String>,
    pub description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::industry_activity)]
#[diesel(primary_key(type_id, activity_id))]
pub struct IndustryActivity {
    pub type_id: i32,
    pub activity_id: i32,
    pub time: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(primary_key(type_id, activity_id, material_type_id))]
#[diesel(table_name = schema::industry_activity_materials)]
pub struct IndustryActivityMaterial {
    pub type_id: i32,
    pub activity_id: i32,
    pub material_type_id: i32,
    pub quantity: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::industry_activity_probabilities)]
#[diesel(primary_key(type_id, activity_id, product_type_id))]
pub struct IndustryActivityProbability {
    pub type_id: i32,
    pub activity_id: i32,
    pub product_type_id: i32,
    pub probability: Option<BigDecimal>,
}

#[derive(Queryable, Debug, Identifiable, Selectable, Associations)]
#[diesel(table_name = schema::industry_activity_products)]
#[diesel(primary_key(type_id, activity_id, product_type_id))]
#[diesel(belongs_to(InvType, foreign_key = product_type_id))]
pub struct IndustryActivityProduct {
    pub type_id: i32,
    pub activity_id: i32,
    pub product_type_id: i32,
    pub quantity: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::industry_activity_races)]
#[diesel(primary_key(type_id, activity_id, product_type_id, race_id))]
pub struct IndustryActivityRace {
    pub type_id: i32,
    pub activity_id: i32,
    pub product_type_id: i32,
    pub race_id: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::industry_activity_skills)]
pub struct IndustryActivitySkill {
    pub type_id: Option<i32>,
    pub activity_id: Option<i32>,
    pub skill_id: Option<i32>,
    pub level: Option<i32>,
    pub id: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::industry_blueprints)]
#[diesel(primary_key(type_id))]
pub struct IndustryBlueprint {
    pub type_id: i32,
    pub max_production_limit: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_categories)]
#[diesel(primary_key(category_id))]
pub struct InvCategory {
    pub category_id: i32,
    pub category_name: Option<String>,
    pub icon_id: Option<i32>,
    pub published: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_contraband_types)]
#[diesel(primary_key(faction_id, type_id))]
pub struct InvContrabandType {
    pub faction_id: i32,
    pub type_id: i32,
    pub standing_loss: Option<f64>,
    pub confiscate_min_sec: Option<f64>,
    pub fine_by_value: Option<f64>,
    pub attack_min_sec: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_control_tower_resource_purposes)]
#[diesel(primary_key(purpose))]
pub struct InvControlTowerResourcePurpose {
    pub purpose: i32,
    pub purpose_text: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_control_tower_resources)]
#[diesel(primary_key(control_tower_type_id, resource_type_id))]
pub struct InvControlTowerResource {
    pub control_tower_type_id: i32,
    pub resource_type_id: i32,
    pub purpose: Option<i32>,
    pub quantity: Option<i32>,
    pub min_security_level: Option<f64>,
    pub faction_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_flags)]
#[diesel(primary_key(flag_id))]
pub struct InvFlag {
    pub flag_id: i32,
    pub flag_name: Option<String>,
    pub flag_text: Option<String>,
    pub order_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_groups)]
#[diesel(primary_key(group_id))]
pub struct InvGroup {
    pub group_id: i32,
    pub category_id: Option<i32>,
    pub group_name: Option<String>,
    pub icon_id: Option<i32>,
    pub use_base_price: Option<bool>,
    pub anchored: Option<bool>,
    pub anchorable: Option<bool>,
    pub fittable_non_singleton: Option<bool>,
    pub published: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_items)]
#[diesel(primary_key(item_id))]
pub struct InvItem {
    pub item_id: i32,
    pub type_id: i32,
    pub owner_id: i32,
    pub location_id: i32,
    pub flag_id: i32,
    pub quantity: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_market_groups)]
#[diesel(primary_key(market_group_id))]
pub struct InvMarketGroup {
    pub market_group_id: i32,
    pub parent_group_id: Option<i32>,
    pub market_group_name: Option<String>,
    pub description: Option<String>,
    pub icon_id: Option<i32>,
    pub has_types: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_meta_groups)]
#[diesel(primary_key(meta_group_id))]
pub struct InvMetaGroup {
    pub meta_group_id: i32,
    pub meta_group_name: Option<String>,
    pub description: Option<String>,
    pub icon_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_meta_types)]
#[diesel(primary_key(type_id))]
pub struct InvMetaType {
    pub type_id: i32,
    pub parent_type_id: Option<i32>,
    pub meta_group_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_names)]
#[diesel(primary_key(item_id))]
pub struct InvName {
    pub item_id: i32,
    pub item_name: String,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_positions)]
#[diesel(primary_key(item_id))]
pub struct InvPosition {
    pub item_id: i32,
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub yaw: Option<f32>,
    pub pitch: Option<f32>,
    pub roll: Option<f32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_traits)]
#[diesel(primary_key(trait_id))]
pub struct InvTrait {
    pub trait_id: i32,
    pub type_id: Option<i32>,
    pub skill_id: Option<i32>,
    pub bonus: Option<f64>,
    pub bonus_text: Option<String>,
    pub unit_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable, Associations)]
#[diesel(table_name = schema::inv_type_materials)]
#[diesel(primary_key(type_id, material_type_id))]
#[diesel(belongs_to(InvType, foreign_key = type_id))]
pub struct InvTypeMaterial {
    pub type_id: i32,
    pub material_type_id: i32,
    pub quantity: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_type_reactions)]
#[diesel(primary_key(reaction_type_id, input, type_id))]
pub struct InvTypeReaction {
    pub reaction_type_id: i32,
    pub input: bool,
    pub type_id: i32,
    pub quantity: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_types)]
#[diesel(primary_key(type_id))]
pub struct InvType {
    pub type_id: i32,
    pub group_id: Option<i32>,
    pub type_name: Option<String>,
    pub description: Option<String>,
    pub mass: Option<f64>,
    pub volume: Option<f64>,
    pub capacity: Option<f64>,
    pub portion_size: Option<i32>,
    pub race_id: Option<i32>,
    pub base_price: Option<BigDecimal>,
    pub published: Option<bool>,
    pub market_group_id: Option<i32>,
    pub icon_id: Option<i32>,
    pub sound_id: Option<i32>,
    pub graphic_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_unique_names)]
#[diesel(primary_key(item_id))]
pub struct InvUniqueName {
    pub item_id: i32,
    pub item_name: String,
    pub group_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::inv_volumes)]
#[diesel(primary_key(type_id))]
pub struct InvVolume {
    pub type_id: i32,
    pub volume: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_celestial_graphics)]
#[diesel(primary_key(celestial_id))]
pub struct MapCelestialGraphic {
    pub celestial_id: i32,
    pub height_map1: Option<i32>,
    pub height_map2: Option<i32>,
    pub shader_preset: Option<i32>,
    pub population: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_celestial_statistics)]
#[diesel(primary_key(celestial_id))]
pub struct MapCelestialStatistic {
    pub celestial_id: i32,
    pub temperature: Option<f64>,
    pub spectral_class: Option<String>,
    pub luminosity: Option<f64>,
    pub age: Option<f64>,
    pub life: Option<f64>,
    pub orbit_radius: Option<f64>,
    pub eccentricity: Option<f64>,
    pub mass_dust: Option<f64>,
    pub mass_gas: Option<f64>,
    pub fragmented: Option<bool>,
    pub density: Option<f64>,
    pub surface_gravity: Option<f64>,
    pub escape_velocity: Option<f64>,
    pub orbit_period: Option<f64>,
    pub rotation_rate: Option<f64>,
    pub locked: Option<bool>,
    pub pressure: Option<f64>,
    pub radius: Option<f64>,
    pub mass: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_constellation_jumps)]
#[diesel(primary_key(from_constellation_id, to_constellation_id))]
pub struct MapConstellationJump {
    pub from_region_id: Option<i32>,
    pub from_constellation_id: i32,
    pub to_constellation_id: i32,
    pub to_region_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_constellations)]
#[diesel(primary_key(constellation_id))]
pub struct MapConstellation {
    pub region_id: Option<i32>,
    pub constellation_id: i32,
    pub constellation_name: Option<String>,
    pub x: Option<f64>,
    pub y: Option<f64>,
    pub z: Option<f64>,
    pub x_min: Option<f64>,
    pub x_max: Option<f64>,
    pub y_min: Option<f64>,
    pub y_max: Option<f64>,
    pub z_min: Option<f64>,
    pub z_max: Option<f64>,
    pub faction_id: Option<i32>,
    pub radius: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_denormalize)]
#[diesel(primary_key(item_id))]
pub struct MapDenormalize {
    pub item_id: i32,
    pub type_id: Option<i32>,
    pub group_id: Option<i32>,
    pub solar_system_id: Option<i32>,
    pub constellation_id: Option<i32>,
    pub region_id: Option<i32>,
    pub orbit_id: Option<i32>,
    pub x: Option<f64>,
    pub y: Option<f64>,
    pub z: Option<f64>,
    pub radius: Option<f64>,
    pub item_name: Option<String>,
    pub security: Option<f64>,
    pub celestial_index: Option<i32>,
    pub orbit_index: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_jumps)]
#[diesel(primary_key(stargate_id))]
pub struct MapJump {
    pub stargate_id: i32,
    pub destination_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_landmarks)]
#[diesel(primary_key(landmark_id))]
pub struct MapLandmark {
    pub landmark_id: i32,
    pub landmark_name: Option<String>,
    pub description: Option<String>,
    pub location_id: Option<i32>,
    pub x: Option<f64>,
    pub y: Option<f64>,
    pub z: Option<f64>,
    pub icon_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_location_scenes)]
#[diesel(primary_key(location_id))]
pub struct MapLocationScene {
    pub location_id: i32,
    pub graphic_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_location_wormhole_classes)]
#[diesel(primary_key(location_id))]
pub struct MapLocationWormholeClass {
    pub location_id: i32,
    pub wormhole_class_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_region_jumps)]
#[diesel(primary_key(from_region_id, to_region_id))]
pub struct MapRegionJump {
    pub from_region_id: i32,
    pub to_region_id: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_regions)]
#[diesel(primary_key(region_id))]
pub struct MapRegion {
    pub region_id: i32,
    pub region_name: Option<String>,
    pub x: Option<f64>,
    pub y: Option<f64>,
    pub z: Option<f64>,
    pub x_min: Option<f64>,
    pub x_max: Option<f64>,
    pub y_min: Option<f64>,
    pub y_max: Option<f64>,
    pub z_min: Option<f64>,
    pub z_max: Option<f64>,
    pub faction_id: Option<i32>,
    pub nebula: Option<i32>,
    pub radius: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_solar_system_jumps)]
#[diesel(primary_key(from_solar_system_id, to_solar_system_id))]
pub struct MapSolarSystemJump {
    pub from_region_id: Option<i32>,
    pub from_constellation_id: Option<i32>,
    pub from_solar_system_id: i32,
    pub to_solar_system_id: i32,
    pub to_constellation_id: Option<i32>,
    pub to_region_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_solar_systems)]
#[diesel(primary_key(solar_system_id))]
pub struct MapSolarSystem {
    pub region_id: Option<i32>,
    pub constellation_id: Option<i32>,
    pub solar_system_id: i32,
    pub solar_system_name: Option<String>,
    pub x: Option<f64>,
    pub y: Option<f64>,
    pub z: Option<f64>,
    pub x_min: Option<f64>,
    pub x_max: Option<f64>,
    pub y_min: Option<f64>,
    pub y_max: Option<f64>,
    pub z_min: Option<f64>,
    pub z_max: Option<f64>,
    pub luminosity: Option<f64>,
    pub border: Option<bool>,
    pub fringe: Option<bool>,
    pub corridor: Option<bool>,
    pub hub: Option<bool>,
    pub international: Option<bool>,
    pub regional: Option<bool>,
    pub constellation: Option<bool>,
    pub security: Option<f64>,
    pub faction_id: Option<i32>,
    pub radius: Option<f64>,
    pub sun_type_id: Option<i32>,
    pub security_class: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::map_universe)]
#[diesel(primary_key(universe_id))]
pub struct MapUniverse {
    pub universe_id: i32,
    pub universe_name: Option<String>,
    pub x: Option<f64>,
    pub y: Option<f64>,
    pub z: Option<f64>,
    pub x_min: Option<f64>,
    pub x_max: Option<f64>,
    pub y_min: Option<f64>,
    pub y_max: Option<f64>,
    pub z_min: Option<f64>,
    pub z_max: Option<f64>,
    pub radius: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::planet_schematics)]
#[diesel(primary_key(schematic_id))]
pub struct PlanetSchematic {
    pub schematic_id: i32,
    pub schematic_name: Option<String>,
    pub cycle_time: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::planet_schematics_pin_map)]
#[diesel(primary_key(schematic_id, pin_type_id))]
pub struct PlanetSchematicsPinMap {
    pub schematic_id: i32,
    pub pin_type_id: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::planet_schematics_type_map)]
#[diesel(primary_key(schematic_id, type_id))]
pub struct PlanetSchematicsTypeMap {
    pub schematic_id: i32,
    pub type_id: i32,
    pub quantity: Option<i32>,
    pub is_input: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::ram_activities)]
#[diesel(primary_key(activity_id))]
pub struct RamActivity {
    pub activity_id: i32,
    pub activity_name: Option<String>,
    pub icon_no: Option<String>,
    pub description: Option<String>,
    pub published: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::ram_assembly_line_stations)]
#[diesel(primary_key(station_id, assembly_line_type_id))]
pub struct RamAssemblyLineStation {
    pub station_id: i32,
    pub assembly_line_type_id: i32,
    pub quantity: Option<i32>,
    pub station_type_id: Option<i32>,
    pub owner_id: Option<i32>,
    pub solar_system_id: Option<i32>,
    pub region_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::ram_assembly_line_type_detail_per_category)]
#[diesel(primary_key(assembly_line_type_id, category_id))]
pub struct RamAssemblyLineTypeDetailPerCategory {
    pub assembly_line_type_id: i32,
    pub category_id: i32,
    pub time_multiplier: Option<f64>,
    pub material_multiplier: Option<f64>,
    pub cost_multiplier: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::ram_assembly_line_type_detail_per_group)]
#[diesel(primary_key(assembly_line_type_id, group_id))]
pub struct RamAssemblyLineTypeDetailPerGroup {
    pub assembly_line_type_id: i32,
    pub group_id: i32,
    pub time_multiplier: Option<f64>,
    pub material_multiplier: Option<f64>,
    pub cost_multiplier: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::ram_assembly_line_types)]
#[diesel(primary_key(assembly_line_type_id))]
pub struct RamAssemblyLineType {
    pub assembly_line_type_id: i32,
    pub assembly_line_type_name: Option<String>,
    pub description: Option<String>,
    pub base_time_multiplier: Option<f64>,
    pub base_material_multiplier: Option<f64>,
    pub base_cost_multiplier: Option<f64>,
    pub volume: Option<f64>,
    pub activity_id: Option<i32>,
    pub min_cost_per_hour: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::ram_installation_type_contents)]
#[diesel(primary_key(installation_type_id, assembly_line_type_id))]
pub struct RamInstallationTypeContent {
    pub installation_type_id: i32,
    pub assembly_line_type_id: i32,
    pub quantity: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::skin_license)]
#[diesel(primary_key(license_type_id))]
pub struct SkinLicense {
    pub license_type_id: i32,
    pub duration: Option<i32>,
    pub skin_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::skin_materials)]
#[diesel(primary_key(skin_material_id))]
pub struct SkinMaterial {
    pub skin_material_id: i32,
    pub display_name_id: Option<i32>,
    pub material_set_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::skin_ship)]
#[diesel(primary_key(skin_id, type_id))]
pub struct SkinShip {
    pub skin_id: i32,
    pub type_id: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::skins)]
#[diesel(primary_key(skin_id))]
pub struct Skin {
    pub skin_id: i32,
    pub internal_name: Option<String>,
    pub skin_material_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::sta_operation_services)]
#[diesel(primary_key(operation_id, service_id))]
pub struct StaOperationService {
    pub operation_id: i32,
    pub service_id: i32,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::sta_operations)]
#[diesel(primary_key(operation_id))]
pub struct StaOperation {
    pub activity_id: Option<i32>,
    pub operation_id: i32,
    pub operation_name: Option<String>,
    pub description: Option<String>,
    pub fringe: Option<i32>,
    pub corridor: Option<i32>,
    pub hub: Option<i32>,
    pub border: Option<i32>,
    pub ratio: Option<i32>,
    pub caldari_station_type_id: Option<i32>,
    pub minmatar_station_type_id: Option<i32>,
    pub amarr_station_type_id: Option<i32>,
    pub gallente_station_type_id: Option<i32>,
    pub jove_station_type_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::sta_services)]
#[diesel(primary_key(service_id))]
pub struct StaService {
    pub service_id: i32,
    pub service_name: Option<String>,
    pub description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::sta_station_types)]
#[diesel(primary_key(station_type_id))]
pub struct StaStationType {
    pub station_type_id: i32,
    pub dock_entry_x: Option<f64>,
    pub dock_entry_y: Option<f64>,
    pub dock_entry_z: Option<f64>,
    pub dock_orientation_x: Option<f64>,
    pub dock_orientation_y: Option<f64>,
    pub dock_orientation_z: Option<f64>,
    pub operation_id: Option<i32>,
    pub office_slots: Option<i32>,
    pub reprocessing_efficiency: Option<f64>,
    pub conquerable: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::sta_stations)]
#[diesel(primary_key(station_id))]
pub struct StaStation {
    pub station_id: i64,
    pub security: Option<f64>,
    pub docking_cost_per_volume: Option<f64>,
    pub max_ship_volume_dockable: Option<f64>,
    pub office_rental_cost: Option<i32>,
    pub operation_id: Option<i32>,
    pub station_type_id: Option<i32>,
    pub corporation_id: Option<i32>,
    pub solar_system_id: Option<i32>,
    pub constellation_id: Option<i32>,
    pub region_id: Option<i32>,
    pub station_name: Option<String>,
    pub x: Option<f64>,
    pub y: Option<f64>,
    pub z: Option<f64>,
    pub reprocessing_efficiency: Option<f64>,
    pub reprocessing_stations_take: Option<f64>,
    pub reprocessing_hangar_flag: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::translation_tables)]
#[diesel(primary_key(source_table, translated_key))]
pub struct TranslationTable {
    pub source_table: String,
    pub destination_table: Option<String>,
    pub translated_key: String,
    pub tc_group_id: Option<i32>,
    pub tc_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::trn_translation_columns)]
#[diesel(primary_key(tc_id))]
pub struct TrnTranslationColumn {
    pub tc_group_id: Option<i32>,
    pub tc_id: i32,
    pub table_name: String,
    pub column_name: String,
    pub master_id: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::trn_translation_languages)]
#[diesel(primary_key(numeric_language_id))]
pub struct TrnTranslationLanguage {
    pub numeric_language_id: i32,
    pub language_id: Option<String>,
    pub language_name: Option<String>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::trn_translations)]
#[diesel(primary_key(tc_id, key_id, language_id))]
pub struct TrnTranslation {
    pub tc_id: i32,
    pub key_id: i32,
    pub language_id: String,
    pub text: String,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::war_combat_zone_systems)]
#[diesel(primary_key(solar_system_id))]
pub struct WarCombatZoneSystem {
    pub solar_system_id: i32,
    pub combat_zone_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable, Selectable)]
#[diesel(table_name = schema::war_combat_zones)]
#[diesel(primary_key(combat_zone_id))]
pub struct WarCombatZone {
    pub combat_zone_id: i32,
    pub combat_zone_name: Option<String>,
    pub faction_id: Option<i32>,
    pub center_system_id: Option<i32>,
    pub description: Option<String>,
}
